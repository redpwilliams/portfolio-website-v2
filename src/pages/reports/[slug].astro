---
import { fetchSanityData, formatDate } from '@util'
import type { ReportType } from '@schemas'
import { Layout } from '@layouts'
import { Image } from 'astro:assets'
import { PortableText } from 'astro-portabletext'

// https://github.com/theisel/astro-portabletext/blob/main/astro-portabletext/README.md
import { PTBlock, PTList } from '@components'

const { slug } = Astro.params

// Fetch Sanity data
const query = `*[_type == "report" && slug.current == "${slug}"][0]
{ ..., "image_url": thumbnail.asset->url, "slug": slug.current }`

const data = await fetchSanityData(query)
const report = data.result as unknown as ReportType

// Redirect if invalid URL/report not found
if (!report) return Astro.redirect('/404')

const { day, month, year } = formatDate(report.date_published)
report.date_published = `${month} ${day}, ${year}`

const headers = report.content
  .filter((object) => object.style === 'h1')
  .map((h1) => h1.children[0].text)
---

<Layout title={report.title}>
  <main>
    <h1 class='title'>{report.title}</h1>
    <p class='caption'>{report.caption}</p>
    <div class='article'>
      <nav class='navigation'>
        <div id='scroll-tab'></div>
        <ul>
          {
            headers.map((h1) => (
              <li class='header-link'>
                <a href={'#' + h1}>{h1}</a>
              </li>
            ))
          }
          <script>
            // Get scrolling tab
            const tab = document.getElementById('scroll-tab')

            // Get list of li's in nav panel
            const links = Array.from(
              // eslint-disable-next-line no-undef
              document.getElementsByClassName('header-link') as HTMLCollectionOf<HTMLElement>
            )

            links.forEach((li) => {
              li.addEventListener('click', () => {
                if (tab === null || li === null) return

                // Calculate new position of tab
                const oldPos = tab.offsetTop
                const newPos = li.offsetTop
                tab.style.setProperty('--tab-pos', newPos - oldPos + 'px')

                // Adjust tab height depending on target's height
                const height = li.getBoundingClientRect().height
                tab.style.setProperty('--tab-height', height + 'px')
              })
            })
          </script>
        </ul>
      </nav>
      <div class='content'>
        <Image
          class='thumbnail'
          width={300}
          height={300}
          src={report.image_url}
          alt={report.alt_text}
        />
        <div class='metadata'>
          <p>{report.read_time} min read</p>
          <p>{report.date_published}</p>
        </div>
        <PortableText value={report.content} components={{ block: PTBlock, list: PTList }} />
      </div>
    </div>
  </main>
</Layout>
<style lang='scss'>
  @use 'src/main' as *;

  main {
    margin: 0 5px;
  }

  .title {
    color: var(--text-main);
    font-size: clamp(1.75rem, 20%, 3rem);
    margin-top: 6rem;
    padding: 1rem 0;
    line-height: 1.3em;
    font-weight: 600;
  }

  .caption {
    padding: 0.5rem 0;
    margin-bottom: 1rem;
  }

  .thumbnail {
    margin-left: auto;
    display: block;
    outline: 2px solid var(--text-gray-dark);
    height: auto;
    max-width: 100%;
    width: 100%;
    border-radius: 10px;
  }

  .metadata {
    font-family: var(--font-mono);
    color: var(--text-gray-light);
    display: flex;
    justify-content: space-between;
    margin: 10px 0 20px 0;
  }

  .navigation {
    display: none;
  }

  a,
  a:visited {
    color: var(--text-main);
  }

  @media (min-width: $breakpoint-main) {
    .title,
    .caption {
      text-align: center;
    }

    .article {
      display: grid;
      grid-template-columns: 30% 70%;
    }

    .navigation {
      display: grid;
      grid-template-columns: auto 1fr;
      align-items: start;
      grid-column: 1;
      color: var(--text-main);
      font-size: 1rem;
      position: sticky;
      height: min-content;
      top: 4rem;
    }

    .content {
      grid-column: 2;
    }

    #scroll-tab {
      content: '';
      width: 4px;
      height: var(--tab-height, 30px);
      background: var(--gradient);
      transform-origin: top;
      transform: translateY(var(--tab-pos));
      transition: all ease 0.25s;
      position: absolute;
      left: -4px;
      border-radius: 2px;
    }

    ul {
      padding-left: 20px;
      position: relative;
      font-family: var(--font-mono);
      font-size: 0.9rem;

      li {
        position: relative;
      }

      &::before {
        content: '';
        background-color: rgba(230, 187, 168, 0.206);
        width: 4px;
        left: -4px;
        height: 100%;
        position: absolute;
        z-index: -1;
        border-radius: 2px;
      }
    }

    .header-link {
      padding: 0.4em 0;
      margin: 1em 0;

      &:first-of-type {
        margin-top: 0;
      }

      &:last-of-type {
        margin-bottom: 0;
      }
    }
  }
</style>
