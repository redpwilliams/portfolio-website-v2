---
// Components and Images
import { Layout } from '@layouts'
import { Button, SectionHeader, Project, Report } from '@components'
import ProfilePicture from '@img/pfp.png'
import BackgroundStroke from '@img/pfp_outline.png'
import { Image } from 'astro:assets'

// Sanity functions and types
import type { SanityResult } from '@types'
import type { ProjectType, ReportType } from '@schemas'
import { fetchSanityData } from '@util'

// Fetch Sanity data
const query = `[
    *[_type == "project" && featured] { ..., "image_url": thumbnail.asset->url },
    *[_type == "report"] { ..., "image_url": thumbnail.asset->url, "slug": slug.current },
   ]`
const data = await fetchSanityData(query)
const projects: SanityResult<ProjectType> = data.result[0]
const reports: SanityResult<ReportType> = data.result[1]

// Show academia graph when development is finished
const displayAcademiaGraph = false
---

<Layout title='Red Williams'>
  <main>
    <section class='hero'>
      <p id='hey'>Hey! I&apos;m</p>
      <h1>Red Williams</h1>
      <h2 class='typewriter-container'><span class='typewriter-word'>student</span></h2>
      <p class='intro'>
        I&apos;m a student at Virginia Tech studying Software Systems with a minor in Computer
        Science, facing an expected graduation date of Winter 2025. I&apos;m always seeking to learn
        from others and expand my skillset!
      </p>
      <Button text={"Let's Chat!"} href={'mailto:redpwilliams@gmail.com'} />
    </section>
    <section>
      <SectionHeader title='Essence' />
      <div class='essence-grid'>
        <p>
          In addition to being a student, I prioritize continuous learning and a commitment. Outside
          of my academic responsibilities, I actively seek out new challenges and projects to expand
          my skill set. This proactive approach has allowed me to deepen my understanding and
          proficiency in areas such as Web Development using tools like Typescript and React, as
          well as Object-Oriented Programming with languages like Java and C#, and even UI design
          with Figma. Despite often being the sole developer on these projects, my familiarity with
          Git enables me to maintain scalable code and uphold good system design practices such as
          conventional commits and modular architecture. I am eager to leverage my knowledge and
          creativity in a professional, team-based setting.
          <br />
          <br />
           Mentioned earlier in part, I am proficient and well-practiced in Javascript (ES6),
          Typescript, HTML5, CSS (including SCSS and SASS), React, Java, C#, and Python, and an
          increasing proficiency with C and C++. With this foundation, I was able to accomplish
          projects like the website for Shredquarters at VT and my 2D game Lost Cat Scared Cat.
          <br />
          <br />
           As I continue to expand my knowledge and expertise in software development, I am
          increasingly drawn to the field of systems engineering. I am fascinated by the complex
          interplay of hardware and software components within large-scale systems and am eager to
          apply my programming skills to tackle intricate challenges in system design, optimization,
          and integration.
        </p>
        <div id='img-wrapper'>
          <Image
            src={ProfilePicture}
            alt='A profile picture with a hexagonal outline'
            quality='high'
            format='png'
            class='pfp'
            width={331}
            height={350}
            loading='eager'
          />
          <div class='stroke-wrapper translate'>
            <Image
              src={BackgroundStroke}
              alt='A profile picture with a hexagonal outline'
              quality='high'
              format='png'
              class='stroke rotate'
              width={270}
              height={307}
              loading='eager'
            />
          </div>
        </div>
      </div>
    </section>
    <section>
      <SectionHeader title='Projects' />
      {
        // If there are no projects that were fetched . . .
        // REVIEW - Separate into projects specifically, not just entire data object
        data.result.length === 0 ? (
          // . . . Display an empty message
          <>
            <h4>Nothing to See right now!</h4>
            <p>
              In the meantime, see what I've been working on in my <a>Github</a>
            </p>
          </>
        ) : (
          // . . . Else display projects as normal
          <>
            <ul id='projects'>
              {projects.map((project) => {
                return <Project {...{ project }} />
              })}
            </ul>
            <Button
              text='View the Archive'
              href='/projects'
              target='_self'
              style='margin: 1rem auto 0 auto;'
            />
          </>
        )
      }
    </section>

    <section>
      <SectionHeader title='Reports' />
      {
        // If there are no reports that were fetched . . .
        // REVIEW - Separate into projects specifically, not just entire data object
        data.result.length === 0 ? (
          // . . . Display an empty message
          <>
            <h4>Nothing to See right now!</h4>
          </>
        ) : (
          // . . . Else display reports as normal
          <ul id='reports'>
            {reports.map((report) => {
              return <Report {...{ report }} />
            })}
          </ul>
        )
      }
    </section>
    {
      displayAcademiaGraph && (
        <section>
          <SectionHeader title='Academia' />
          <div id='academia-container' />
        </section>
      )
    }
    <!-- <script type='module'>
      import { initAcademiaGraph } from './src/util.ts'
      initAcademiaGraph()
    </script> -->
    <section class='connect'>
      <h3>Let's Connect!</h3>
      <p>
        I am currently looking for Internships around Summer 2024. I would love the opportunity to
        work and learn from you! Please reach out if you have any questions, or would like to hear
        from me.
        <br />
         Thanks!
      </p>
      <Button
        text='Get in touch'
        href='mailto:redpwilliams@gmail.com'
        style={{ margin: '10px auto' }}
      />
    </section>
  </main>
</Layout>
<style lang='scss'>
  @use 'src/main' as *;

  section {
    margin: 5rem 0;
    max-width: 100%;
  }

  .hero {
    padding-top: 6rem;
    margin-top: 0;
  }

  #hey {
    color: var(--text-gray-dark);
    font-family: var(--font-mono);
    font-weight: 700;
    font-size: clamp(1.1rem, 2vw, 1.6rem);
  }

  h1 {
    margin-bottom: -5px;
    font-weight: 500;
    color: var(--text-main);
    font-size: clamp(3rem, 5vw, 6rem);
  }

  h2 {
    display: inline-block;
    font-family: var(--font-mono);
    font-weight: 400;
    font-size: clamp(1rem, 3vw, 1.6rem);
    text-transform: capitalize;
    position: relative;

    // typewriter-word
    &::before {
      content: '';
      background-image: var(--gradient);
      width: clamp(8rem, 18vw, 20rem);
      height: 15px;
      margin-right: 10px;
      display: inline-block;
      vertical-align: middle;
    }
  }

  .typewriter-word {
    --typewriter-speed: 1s;
    --typewriter-delay: 1s;
    --typewriter-characters: 7;
    position: relative;

    &::before,
    &::after {
      content: '';
      position: absolute;
      inset: 0;
    }

    &::before {
      background: var(--bg-color);
      animation: typewriter var(--typewriter-speed) steps(var(--typewriter-characters))
        var(--typewriter-delay) forwards;
    }

    &::after {
      width: 0.1em;
      height: 90%;
      top: 5%;
      bottom: 5%;
      background: var(--gradient);
      animation:
        typewriter var(--typewriter-speed) steps(var(--typewriter-characters))
          var(--typewriter-delay) forwards,
        blink 600ms ease infinite;
    }
  }

  @keyframes typewriter {
    to {
      left: 100%;
    }
  }

  @keyframes blink {
    to {
      opacity: 0;
    }
  }

  .intro {
    font-size: 1.5rem;
    margin: 2rem 0;
    line-height: 1.8;
    font-size: clamp(1rem, 1.4vw, 1.3rem);
  }

  #img-wrapper {
    width: fit-content;
    height: fit-content;
    margin: 0 auto;
    position: relative;
    --x-offset: 6px;
    --y-offset: 7px;
    --translation-factor: 2;
    --transition-duration-rotation: 0.2s;
    --transition-duration-translate: 0.4s;
  }

  img,
  .stroke-wrapper {
    height: auto;
    margin: 1rem auto;
    display: block;
  }

  .pfp {
    width: 55%;
    position: relative;
    z-index: 2;
    transform: translate(calc(-1 * (var(--x-offset))), calc(-1 * (var(--y-offset))));
    /* 
     * On mouse out, wait for rotation undo animation, then translate back into position */
    transition: transform var(--transition-duration-translate) ease
      var(--transition-duration-rotation);
  }

  .stroke {
    width: 45%;
  }

  .stroke-wrapper {
    height: auto;
    position: absolute;
    margin: auto;
    inset: 0;
  }

  .translate {
    transform: translate(var(--x-offset), var(--y-offset));
    opacity: 0.5;
    /* 
     * On mouse out, wait for rotation animation to finish, then translate and  reduce opacity
     */
    transition:
      opacity var(--transition-duration-translate) ease var(--transition-duration-rotation),
      transform var(--transition-duration-translate) ease var(--transition-duration-rotation);
  }

  .rotate {
    /* Undo rotation immediately after hover off */
    transition: transform var(--transition-duration-rotation) ease;
  }

  .pfp:hover {
    transform: translate(
      calc(-1 * var(--translation-factor) * (var(--x-offset))),
      calc(-1 * var(--translation-factor) * (var(--y-offset)))
    );

    & + .translate {
      opacity: 1;
      transform: translate(
        calc(var(--translation-factor) * (var(--x-offset))),
        calc(var(--translation-factor) * (var(--y-offset)))
      );
    }

    & ~ .stroke-wrapper .rotate {
      transform: rotate(60deg);
    }
  }

  .connect {
    text-align: center;
    max-width: 40rem;
    margin: 0 auto;

    & h3 {
      margin-bottom: 10px;
    }

    & p {
      padding: 15px 0;
    }
  }

  @media (min-width: $breakpoint-main) {
    .hero {
      margin: 0;
    }
    .intro {
      width: 80%;
    }

    .essence-grid {
      display: grid;
      grid-template-columns: 70% 30%;
      place-items: center;
    }

    #img-wrapper {
      min-width: 16rem;
      --x-offset: 8px;
      --y-offset: 14px;
      --translation-factor: 1.7;
    }

    .pfp {
      width: 65%;
    }

    .stroke {
      width: 55%;
    }
  }

  #projects {
    margin: 0 auto;
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(21rem, 1fr));
    gap: 30px 15px;
  }

  #reports {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(20rem, 1fr));
    gap: 15px;
  }

  @media (min-width: $breakpoint-main) {
    #projects {
      display: block;
    }
  }
</style>
